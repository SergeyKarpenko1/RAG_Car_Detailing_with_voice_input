#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Flask –≤–º–µ—Å—Ç–æ Streamlit.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Flask,
–∫–æ—Ç–æ—Ä—ã–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å —Ç–µ–º–∏ –∂–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, —á—Ç–æ –∏ Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
"""

import os
import sys
import json
from flask import Flask, request, jsonify, render_template_string, Response, send_from_directory
from dotenv import load_dotenv

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
os.environ["TOKENIZERS_PARALLELISM"] = "false"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è PyTorch
os.environ["OMP_NUM_THREADS"] = "1"
os.environ["MKL_NUM_THREADS"] = "1"

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ç—á –¥–ª—è torch._classes
try:
    import patch_torch
except ImportError:
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å patch_torch.py")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from chat import RAGChatBot
from retriever import DocumentRetriever
from db import ChatDatabase
from speech_to_text import SpeechRecognizer

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
static_dir = os.path.join(current_dir, 'static')
if not os.path.exists(static_dir):
    os.makedirs(static_dir)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
chatbot = None
user_id = None
messages = []
speech_recognizer = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è —Ä–µ—á–∏

# HTML-—à–∞–±–ª–æ–Ω –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Roboto', Arial, sans-serif;
            margin: 0;
            padding: 0;
            color: #333;
            position: relative;
            min-height: 100vh;
            overflow-x: hidden;
        }
        
        /* –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω */
        .simple-background {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        }
        
        /* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */
        .content {
            position: relative;
            z-index: 1;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            margin-top: 20px;
            margin-bottom: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #4CAF50;
        }
        
        h1 {
            color: #2E7D32;
            margin-bottom: 10px;
        }
        
        .description {
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            border-left: 4px solid #4CAF50;
        }
        
        .message {
            padding: 15px;
            margin: 15px 0;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            line-height: 1.5;
        }
        
        .user {
            background-color: #e3f2fd;
            text-align: right;
            border-right: 4px solid #2196F3;
        }
        
        .assistant {
            background-color: #f5f5f5;
            border-left: 4px solid #4CAF50;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö */
        .assistant ul, .assistant ol {
            padding-left: 20px;
            margin: 10px 0;
        }
        
        .assistant li {
            margin-bottom: 5px;
        }
        
        .list-item {
            margin: 8px 0;
            padding-left: 10px;
            border-left: 3px solid #4CAF50;
        }
        
        .input-container {
            display: flex;
            margin-top: 20px;
            gap: 10px;
        }
        
        #user-input {
            flex-grow: 1;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        #user-input:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 5px rgba(76, 175, 80, 0.3);
        }
        
        button {
            padding: 12px 18px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            transition: background-color 0.3s, transform 0.1s;
        }
        
        button:hover {
            background-color: #45a049;
        }
        
        button:active {
            transform: scale(0.98);
        }
        
        .sources {
            font-size: 0.85em;
            color: #666;
            margin-top: 10px;
            padding-top: 8px;
            border-top: 1px dashed #ddd;
        }
        
        .mic-button {
            background-color: #f44336;
        }
        
        .mic-button:hover {
            background-color: #e53935;
        }
        
        .mic-button.recording {
            background-color: #9e9e9e;
        }
        
        .clear-button {
            background-color: #2196F3;
        }
        
        .clear-button:hover {
            background-color: #1e88e5;
        }
        
        .status {
            font-style: italic;
            color: #666;
            margin-top: 15px;
            text-align: center;
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
        @media (max-width: 600px) {
            .content {
                padding: 15px;
                margin: 10px;
            }
            
            .input-container {
                flex-direction: column;
            }
            
            button {
                margin-top: 10px;
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <!-- –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ–Ω –≤–º–µ—Å—Ç–æ –≤–∏–¥–µ–æ -->
    <div class="simple-background"></div>
    
    <div class="content">
        <div class="header">
            <h1>üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç</h1>
        </div>
        
        <div class="description">
            <h3>–û —á–∞—Ç-–±–æ—Ç–µ:</h3>
            <p>–≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ —É—Ö–æ–¥—É –∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º. –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é RAG (Retrieval-Augmented Generation), –∫–æ—Ç–æ—Ä–∞—è —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π, –∞ –∑–∞—Ç–µ–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</p>
            
            <p><strong>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:</strong></p>
            <ol>
                <li><strong>–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:</strong> –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –±–æ—Ç —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ–µ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º BM25.</li>
                <li><strong>–†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:</strong> –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ä–∞–Ω–∂–∏—Ä—É—é—Ç—Å—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞, –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</li>
                <li><strong>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞:</strong> –ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å Claude 3.5 Haiku.</li>
                <li><strong>–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏):</strong> –ï—Å–ª–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –±–æ—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.</li>
            </ol>
            
            <p>–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –º–æ–π–∫–µ, –ø–æ–ª–∏—Ä–æ–≤–∫–µ, —Ö–∏–º—á–∏—Å—Ç–∫–µ, –∑–∞—â–∏—Ç–µ –∫—É–∑–æ–≤–∞ –∏ –¥—Ä—É–≥–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —É—Ö–æ–¥–∞ –∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º. –ß–∞—Ç-–±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π, —Ç–∞–∫ –∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ (—Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞).</p>
            
            <p><strong>–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</strong></p>
            <ul>
                <li>–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º—ã—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è?</li>
                <li>–ö–∞–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–æ–ª–∏—Ä–æ–≤–∫–∏ —Ñ–∞—Ä?</li>
                <li>–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å –∫—É–∑–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∑–∏–º–æ–π?</li>
                <li>–ö–∞–∫ –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –∑–∞–ø–∞—Ö–∞ –≤ —Å–∞–ª–æ–Ω–µ?</li>
            </ul>
        </div>
        
        <div id="messages-container">
            {% for message in messages %}
            <div class="message {{ message.role }}">
                <div class="message-content">{{ message.content | safe }}</div>
                {% if message.sources %}
                <div class="sources">
                    <strong>–ò—Å—Ç–æ—á–Ω–∏–∫–∏:</strong>
                    {% for source in message.sources %}
                    <div>- {{ source }}</div>
                    {% endfor %}
                </div>
                {% endif %}
            </div>
            {% endfor %}
        </div>
        
        <div class="input-container">
            <input type="text" id="user-input" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º—ã—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è?">
            <button id="send-button">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            <button id="mic-button" class="mic-button">üé§</button>
            <button id="clear-button" class="clear-button">–û—á–∏—Å—Ç–∏—Ç—å</button>
        </div>
        
        <div id="status" class="status"></div>
    </div>
    
    <script>
        let isRecording = false;
        
        document.addEventListener('DOMContentLoaded', function() {
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            formatMessages();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–∏–¥–µ–æ-—Ñ–∞–π–ª–∞
            checkVideoFile();
        });
        
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        function formatMessages() {
            try {
                const assistantMessages = document.querySelectorAll('.assistant .message-content');
                
                assistantMessages.forEach(message => {
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    let content = message.innerHTML;
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    if (content.match(/\d+\.\s+[^\n]+/)) {
                        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
                        const lines = content.split('\n');
                        let formattedContent = '';
                        let inList = false;
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
                        for (let i = 0; i < lines.length; i++) {
                            const line = lines[i];
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É–Ω–∫—Ç–æ–º —Å–ø–∏—Å–∫–∞
                            if (line.match(/^\d+\.\s+/)) {
                                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å–ø–∏—Å–æ–∫
                                if (!inList) {
                                    formattedContent += '<ol>';
                                    inList = true;
                                }
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
                                formattedContent += '<li>' + line.replace(/^\d+\.\s+/, '') + '</li>';
                            } else if (line.match(/^[*\-‚Ä¢]\s+/)) {
                                // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                                if (!inList || inList === 'ol') {
                                    if (inList === 'ol') {
                                        formattedContent += '</ol>';
                                    }
                                    formattedContent += '<ul>';
                                    inList = 'ul';
                                }
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞
                                formattedContent += '<li>' + line.replace(/^[*\-‚Ä¢]\s+/, '') + '</li>';
                            } else {
                                // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
                                if (inList === 'ol') {
                                    formattedContent += '</ol>';
                                    inList = false;
                                } else if (inList === 'ul') {
                                    formattedContent += '</ul>';
                                    inList = false;
                                }
                                
                                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é —Å—Ç—Ä–æ–∫—É
                                formattedContent += line + '<br>';
                            }
                        }
                        
                        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º
                        if (inList === 'ol') {
                            formattedContent += '</ol>';
                        } else if (inList === 'ul') {
                            formattedContent += '</ul>';
                        }
                        
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        message.innerHTML = formattedContent;
                    } else {
                        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤, –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ <br>
                        message.innerHTML = content.replace(/\n/g, '<br>');
                    }
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            }
        }
        
        // –ü—É—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–±—Ä–∞–ª–∏ –≤–∏–¥–µ–æ-—Ñ–æ–Ω
        function checkVideoFile() {
            // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –≤–∏–¥–µ–æ-—Ñ–æ–Ω —É–±—Ä–∞–Ω
            console.log('–í–∏–¥–µ–æ-—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω');
        }
        
        document.getElementById('send-button').addEventListener('click', sendMessage);
        document.getElementById('user-input').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        document.getElementById('mic-button').addEventListener('click', toggleRecording);
        document.getElementById('clear-button').addEventListener('click', clearHistory);
        
        function sendMessage() {
            const userInput = document.getElementById('user-input').value.trim();
            if (userInput) {
                document.getElementById('status').textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...';
                
                fetch('/send_message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message: userInput }),
                })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('user-input').value = '';
                    document.getElementById('status').textContent = '';
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('status').textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è';
                });
            }
        }
        
        function toggleRecording() {
            const micButton = document.getElementById('mic-button');
            
            // –ò–∑–º–µ–Ω—è–µ–º –≤–∏–¥ –∫–Ω–æ–ø–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å
            micButton.textContent = '‚èπÔ∏è';
            micButton.classList.add('recording');
            document.getElementById('status').textContent = '–ó–∞–ø–∏—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å (–¥–æ 20 —Å–µ–∫—É–Ω–¥). –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚èπÔ∏è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.';
            micButton.disabled = true; // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–∏—Å—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
            fetch('/record_audio', {
                method: 'POST',
            })
            .then(response => response.json())
            .then(data => {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                micButton.textContent = 'üé§';
                micButton.classList.remove('recording');
                micButton.disabled = false;
                
                if (data.success && data.text) {
                    document.getElementById('user-input').value = data.text;
                    document.getElementById('status').textContent = '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ' + data.text;
                } else {
                    document.getElementById('status').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å: ' + (data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                micButton.textContent = 'üé§';
                micButton.classList.remove('recording');
                micButton.disabled = false;
                document.getElementById('status').textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏';
            });
        }
        
        function clearHistory() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞?')) {
                fetch('/clear_history', {
                    method: 'POST',
                })
                .then(response => response.json())
                .then(data => {
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('status').textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏';
                });
            }
        }
    </script>
</body>
</html>
"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
def initialize_components():
    global chatbot, user_id, messages, speech_recognizer
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å event loop
        try:
            import asyncio
            try:
                loop = asyncio.get_event_loop()
            except RuntimeError:
                # –ï—Å–ª–∏ event loop –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
        except Exception as e:
            print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ asyncio: {e}")
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –≤ tokenizers
        os.environ["TOKENIZERS_PARALLELISM"] = "false"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ –∑–∞—Ä–∞–Ω–µ–µ
        speech_recognizer = SpeechRecognizer(
            recognizer_type="google",
            language="ru-RU",
            timeout=10,
            phrase_time_limit=20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–æ 20 —Å–µ–∫—É–Ω–¥
        )
        print("–ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
        api_key = os.getenv("OPENROUTER_API_KEY")
        if not api_key:
            print("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        from langchain_openai import ChatOpenAI
        llm = ChatOpenAI(
            openai_api_key=api_key,
            openai_api_base="https://openrouter.ai/api/v1",
            model_name="anthropic/claude-3.5-haiku",
            temperature=0.5,
            max_tokens=2048,
        )
        
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        db_path = "./chat_history.db"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞ —Å —Ä–µ—Ä–∞–Ω–∫–µ—Ä–æ–º
        try:
            retriever = DocumentRetriever(
                persist_directory="./chroma_langchain_db/knowledge",
                collection_name="knowledge_markdown",
                embedding_model_name="intfloat/multilingual-e5-base",
                similarity_top_k=10,
                bm25_top_k=10,
                similarity_weight=0.5,
                bm25_weight=0.5,
                use_reranker=True,
                reranker_model_name="DiTy/cross-encoder-russian-msmarco",
                reranker_top_k=5
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞: {e}")
            # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ—Ç—Ä–∏–≤–µ—Ä –±–µ–∑ —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞
            retriever = DocumentRetriever(
                persist_directory="./chroma_langchain_db/knowledge",
                collection_name="knowledge_markdown",
                embedding_model_name="intfloat/multilingual-e5-base",
                use_reranker=False
            )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞
        chatbot = RAGChatBot(
            llm=llm,
            retriever=retriever,
            cache_file="./response_cache.json",
            db_path=db_path,
            use_web_search=True,
            max_web_search_attempts=3,
            max_relevant_sources=3,
            use_voice_input=True,
            speech_recognizer_type="google",
            speech_language="ru-RU"
        )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        import uuid
        user_id = str(uuid.uuid4())
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        db = ChatDatabase(db_path)
        history = db.get_chat_history(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = []
        for msg in history:
            role = "user" if msg["role"] == "user" else "assistant"
            messages.append({"role": role, "content": msg["message"], "sources": []})
        
        print("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        import traceback
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        print(traceback.format_exc())
        sys.exit(1)

# –ú–∞—Ä—à—Ä—É—Ç—ã Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.route('/')
def index():
    import time
    timestamp = int(time.time())  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    return render_template_string(HTML_TEMPLATE, messages=messages, timestamp=timestamp)

@app.route('/send_message', methods=['POST'])
def send_message():
    data = request.json
    user_message = data.get('message', '')
    
    if user_message:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.append({"role": "user", "content": user_message, "sources": []})
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç-–±–æ—Ç–∞
            response = chatbot.answer(user_message, user_id=user_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            messages.append({
                "role": "assistant",
                "content": response["answer"],
                "sources": response.get("sources", [])
            })
            
            return jsonify({"success": True})
        except Exception as e:
            import traceback
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            print(traceback.format_exc())
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_message = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            messages.append({"role": "assistant", "content": error_message, "sources": []})
            
            return jsonify({"success": True})
    
    return jsonify({"success": False, "error": "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})

@app.route('/record_audio', methods=['POST'])
def record_audio():
    """
    –ï–¥–∏–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.
    –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —ç—Ç–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞.
    """
    global speech_recognizer
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if speech_recognizer is None:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å event loop
            try:
                import asyncio
                try:
                    loop = asyncio.get_event_loop()
                except RuntimeError:
                    # –ï—Å–ª–∏ event loop –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
            except Exception as e:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ asyncio: {e}")
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –≤ tokenizers
            import os
            os.environ["TOKENIZERS_PARALLELISM"] = "false"
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Ä–µ—á–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
            speech_recognizer = SpeechRecognizer(
                recognizer_type="google",
                language="ru-RU",
                timeout=10,
                phrase_time_limit=20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –¥–æ 20 —Å–µ–∫—É–Ω–¥
            )
        
        print("–ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        text, confidence = speech_recognizer.recognize_from_microphone()
        
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {text}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
        
        if text and not text.startswith("–û—à–∏–±–∫–∞") and not text.startswith("–¢–∞–π–º–∞—É—Ç"):
            return jsonify({"success": True, "text": text, "confidence": confidence})
        else:
            return jsonify({"success": False, "error": text})
    except Exception as e:
        import traceback
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")
        print(traceback.format_exc())
        return jsonify({"success": False, "error": str(e)})

@app.route('/clear_history', methods=['POST'])
def clear_history():
    try:
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        db = ChatDatabase("./chat_history.db")
        db.clear_history(user_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        global messages
        messages = []
        
        return jsonify({"success": True})
    except Exception as e:
        import traceback
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        print(traceback.format_exc())
        return jsonify({"success": False, "error": str(e)})

@app.route('/static/<path:filename>')
def serve_static(filename):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤, –≤–∫–ª—é—á–∞—è –≤–∏–¥–µ–æ-—Ñ–æ–Ω."""
    return send_from_directory(static_dir, filename)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    initialize_components()
    
    print("–ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app.run(debug=True, port=8501)
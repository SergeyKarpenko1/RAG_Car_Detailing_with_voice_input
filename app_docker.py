#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞ —Å RAG –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º –≤–≤–æ–¥–æ–º.
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.
"""

# –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º –≤ tokenizers –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–µ–¥–ª–æ–∫–æ–≤
import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import uuid
import time
import sys
import tempfile
import queue
import threading
import av
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º streamlit –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
import streamlit as st

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
from db import ChatDatabase
from chat import RAGChatBot
from retriever import DocumentRetriever
from speech_to_text import SpeechRecognizer

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="Detailing your car",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏
def init_session():
    if "user_id" not in st.session_state:
        st.session_state.user_id = str(uuid.uuid4())
    
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    if "speech_recognizer" not in st.session_state:
        try:
            st.session_state.speech_recognizer = SpeechRecognizer(
                recognizer_type="google",
                language="ru-RU"
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è —Ä–µ—á–∏: {e}")
            st.session_state.speech_recognizer = None
    
    if "chatbot" not in st.session_state:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
            api_key = os.getenv("OPENROUTER_API_KEY")
            if not api_key:
                st.error("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
                st.stop()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            from langchain_openai import ChatOpenAI
            llm = ChatOpenAI(
                openai_api_key=api_key,
                openai_api_base="https://openrouter.ai/api/v1",
                model_name="anthropic/claude-3.5-haiku",
                temperature=0.5,
                max_tokens=2048,
            )
            
            # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
            db_path = "./chat_history.db"
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞ —Å —Ä–µ—Ä–∞–Ω–∫–µ—Ä–æ–º
            # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try-except –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
            try:
                # –í Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                persist_directory = "/app/chroma_langchain_db/knowledge"
                
                print(f"–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ Docker: {persist_directory}")
                
                retriever = DocumentRetriever(
                    persist_directory=persist_directory,
                    collection_name="knowledge_markdown",
                    embedding_model_name="intfloat/multilingual-e5-base",
                    similarity_top_k=10,
                    bm25_top_k=10,
                    similarity_weight=0.5,
                    bm25_weight=0.5,
                    use_reranker=True,
                    reranker_model_name="DiTy/cross-encoder-russian-msmarco",
                    reranker_top_k=5
                )
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞: {e}")
                # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ—Ç—Ä–∏–≤–µ—Ä –±–µ–∑ —Ä–µ—Ä–∞–Ω–∫–µ—Ä–∞
                persist_directory = "/app/chroma_langchain_db/knowledge"
                
                print(f"–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ Docker (fallback): {persist_directory}")
                
                retriever = DocumentRetriever(
                    persist_directory=persist_directory,
                    collection_name="knowledge_markdown",
                    embedding_model_name="intfloat/multilingual-e5-base",
                    use_reranker=False
                )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞
            st.session_state.chatbot = RAGChatBot(
                llm=llm,
                retriever=retriever,
                cache_file="./response_cache.json",
                db_path=db_path,
                use_web_search=True,
                max_web_search_attempts=3,
                max_relevant_sources=3,
                use_voice_input=True,
                speech_recognizer_type="google",
                speech_language="ru-RU"
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç-–±–æ—Ç–∞: {e}")
            import traceback
            st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_chat_history():
    if "db" not in st.session_state:
        st.session_state.db = ChatDatabase("./chat_history.db")
    
    history = st.session_state.db.get_chat_history(st.session_state.user_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
    st.session_state.messages = []
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞
    for msg in reversed(history):
        role = "user" if msg["role"] == "user" else "assistant"
        st.session_state.messages.append({"role": role, "content": msg["message"]})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
def clear_chat_history():
    if "db" not in st.session_state:
        st.session_state.db = ChatDatabase("./chat_history.db")
    
    st.session_state.db.clear_history(st.session_state.user_id)
    st.session_state.messages = []
    st.rerun()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–π —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è —Ä–µ—á–∏
recognizer_options = {
    "google": "Google Speech Recognition",
    "whisper": "OpenAI Whisper (–ª–æ–∫–∞–ª—å–Ω—ã–π)",
    "whisper_api": "OpenAI Whisper API",
    "sphinx": "CMU Sphinx (–æ—Ñ–ª–∞–π–Ω)"
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
if "recognizer_type" not in st.session_state:
    st.session_state.recognizer_type = "google"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
init_session()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.title("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç")
    st.markdown("""
    ### –û –±–æ—Ç–µ
    
    –≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –≤–æ–ø—Ä–æ—Å–∞—Ö –æ–± —É—Ö–æ–¥–µ –∑–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º.
    
    **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
    - –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–≤–µ–∫—Ç–æ—Ä–Ω—ã–π + BM25)
    - –ü–µ—Ä–µ—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é CrossEncoder
    - –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    - –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –µ—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
    - –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Speech Recognition
    
    **–ö–æ–º–∞–Ω–¥—ã:**
    - –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    """)
    
    st.divider()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", key="clear_history"):
        clear_chat_history()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    st.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {st.session_state.user_id}")

# –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å
st.title("–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ messages_container
# –≠—Ç–æ—Ç –±–ª–æ–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –≤—ã—à–µ

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ - –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö—É
input_container = st.container()

# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä "–¥—É–º–∞—é" - –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
thinking_container = st.container()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
messages_container = st.container()

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
# –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞, –ø–æ—ç—Ç–æ–º—É –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
with messages_container:
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –≤–≤–µ—Ä—Ö—É
with input_container:
    if "user_input" not in st.session_state:
        st.session_state.user_input = ""
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    with st.form(key="input_form", clear_on_submit=False):
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        user_input = st.text_input(
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å:",
            value=st.session_state.user_input,
            key="input_field",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –º—ã—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è?"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞, –≤—ã—Ä–æ–≤–Ω–µ–Ω–Ω—ã–µ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        col1, col2, col3 = st.columns([2, 2, 6])
        
        with col1:
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            submit_button = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary")
            
        with col2:
            # –ö–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
            speech_button = st.form_submit_button("üé§", help="–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥")
            
        with col3:
            # –ü—É—Å—Ç–∞—è –∫–æ–ª–æ–Ω–∫–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
            pass
        
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    if submit_button and user_input:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        st.session_state.messages.insert(0, {"role": "user", "content": user_input})
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–¥—É–º–∞—é"
        with thinking_container:
            st.info("ü§î –î—É–º–∞—é... –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
            start_time = time.time()
            response = st.session_state.chatbot.answer(user_input, user_id=st.session_state.user_id)
            elapsed_time = time.time() - start_time
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        bot_answer = response["answer"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if response["sources"]:
            bot_answer += "\n\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**"
            for source in response["sources"]:
                bot_answer += f"\n- {source}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞
        bot_answer += f"\n\n*–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫.*"
        if response["used_web_search"]:
            bot_answer += "\n*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ*"
        if response["from_cache"]:
            bot_answer += "\n*–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞*"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        st.session_state.messages.insert(1, {"role": "assistant", "content": bot_answer})
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        st.session_state.user_input = ""
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        st.rerun()

# –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø–∏—Å–∏
if "show_voice_input" not in st.session_state:
    st.session_state.show_voice_input = False

if speech_button:
    st.session_state.show_voice_input = True

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
speech_text = None
if st.session_state.show_voice_input:
    with input_container:
        st.subheader("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥")
        
        # –í—ã–±–æ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
        selected_recognizer = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å:",
            options=list(recognizer_options.keys()),
            format_func=lambda x: recognizer_options[x],
            index=list(recognizer_options.keys()).index(st.session_state.recognizer_type),
            key="recognizer_select"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
        if selected_recognizer != st.session_state.recognizer_type:
            st.session_state.recognizer_type = selected_recognizer
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å —Å –Ω–æ–≤—ã–º —Ç–∏–ø–æ–º
            try:
                st.session_state.speech_recognizer = SpeechRecognizer(
                    recognizer_type=selected_recognizer,
                    language="ru-RU"
                )
                st.success(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {recognizer_options[selected_recognizer]}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è: {e}")
        
        # –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        audio_data = st.audio_input("–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", key="audio_input")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
        if audio_data:
            with st.spinner("–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å..."):
                try:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                        temp_filename = temp_file.name
                        temp_file.write(audio_data.getvalue())
                    
                    # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å –∏–∑ —Ñ–∞–π–ª–∞
                    text, confidence = st.session_state.speech_recognizer.recognize_from_file(temp_filename)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(temp_filename)
                    
                    if text and not text.startswith("–û—à–∏–±–∫–∞") and not text.startswith("–¢–∞–π–º–∞—É—Ç"):
                        # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º st.session_state.user_input –∑–¥–µ—Å—å,
                        # —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                        st.success(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
                        speech_text = text
                    else:
                        st.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {text}")
                except Exception as e:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                    if 'temp_filename' in locals() and os.path.exists(temp_filename):
                        os.unlink(temp_filename)
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏: {e}")
                    import traceback
                    st.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        
        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –æ–¥–Ω–∞ –ø–æ–¥ –¥—Ä—É–≥–æ–π
        col1, col2 = st.columns(2)
        with col1:
            if speech_text and st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", key="send_voice"):
                # –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
                st.session_state.show_voice_input = False
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                st.session_state.messages.insert(0, {"role": "user", "content": speech_text})
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–¥—É–º–∞—é"
                with thinking_container:
                    st.info("ü§î –î—É–º–∞—é... –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞..."):
                    start_time = time.time()
                    response = st.session_state.chatbot.answer(speech_text, user_id=st.session_state.user_id)
                    elapsed_time = time.time() - start_time
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                bot_answer = response["answer"]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if response["sources"]:
                    bot_answer += "\n\n**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**"
                    for source in response["sources"]:
                        bot_answer += f"\n- {source}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞
                bot_answer += f"\n\n*–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time:.2f} —Å–µ–∫.*"
                if response["used_web_search"]:
                    bot_answer += "\n*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ*"
                if response["from_cache"]:
                    bot_answer += "\n*–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞*"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
                st.session_state.messages.insert(1, {"role": "assistant", "content": bot_answer})
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                st.rerun()
        
        with col2:
            if st.button("–°–∫—Ä—ã—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥", key="hide_voice"):
                st.session_state.show_voice_input = False
                st.rerun()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
if len(st.session_state.messages) == 0:
    load_chat_history()